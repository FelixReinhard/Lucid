/*
  A List type to implement everything a good list should have
*/

struct List{ls}

// add one element to the list
fn List::push_back(self, elem) => push(self.ls, elem);

// adds a whole range, or list to the list.
fn List::push_back_range(self, elements) {
  for elem in elements {
    self.push_back(elem);
  }
}

fn List::push_front(self, elem) {
  print("WARNNING: Does not work idk man");
  if len(self.ls) == 0 {
    push(self.ls, elem);
    return;
  }
  let last = self.last();
  let i = len(self.ls) - 2;
  while i >= 1 {
    self.ls[i] = self.ls[i-1];
    i--;
  }
  self.ls[0] = elem;
  push(self.ls, last);
}

fn List::push_front_range(self, elements) {
  for i in elements => self.push_front(i);
}

// get last element of List.
fn List::last(self) {
  if len(self.ls) > 0 {
    return self.ls[len(self.ls) - 1];
  }
  return null;
}
// gets the actual list element
fn List::get(self) => self.ls;

// get a copy in reversed order
fn List::rev_get(self) {
  let new_ls = [];
  let i = len(self.ls) - 1;
  while i >= 0 {
    push(new_ls, self.ls[i]);
    i--;
  }
  return new List(new_ls);
}

fn List::to_str(self) => self.ls;

fn List::map(self, function) {
  let i = 0;
  while i < len(self.ls) {
    self.ls[i] = function(self.ls[i]);
    i++;
  }
}

fn List::fold(self, start_val, func) {
  for i in self.ls {
    start_val = func(start_val, i);
  }
  return start_val;
}

fn List::insert(self, index, elem) {
  let last = self.last();
  let i = len(self.ls) - 1;
  while i > index {
    self.ls[i] = self.ls[i-1];
    i--;
  }
  self.ls[index] = elem;
  push(self.ls, last);
}

fn List::any(self, func) {
  let res = false;
  for elem in self.ls {
    if func(elem) => res = true;
  }
  return res;
}

fn List::filter(self, func) {
  let new_ls = [];
  for elem in self.ls {
    if func(elem) == true { 
      push(new_ls, elem);
      print(func(elem));
      print(elem);
    }
  }
  return new_ls;
}
// create methods always at the very end.
fn List::create() => new List([]);
